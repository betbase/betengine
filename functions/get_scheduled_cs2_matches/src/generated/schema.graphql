"""Boolean filter for true/false fields."""
input BooleanFilter {
  """Value to look for, can be nullable."""
  equals: Boolean
}

"""A content catalog entity."""
interface ContentCatalogEntity {
  """The content catalog version this entity appears in."""
  contentCatalogVersion: ContentCatalogVersion!

  """The ID of the content catalog entity."""
  id: ID!

  """The URL to the content catalog entity's image"""
  imageUrl: Url!

  """The name of the content catalog entity."""
  name: String!

  """The visibility of this entity to other users."""
  private: Boolean
}

"""
The result of querying list of content catalog entities, which provides additional information.
"""
type ContentCatalogEntityConnection {
  """All content catalog entities edges for a query on a given page."""
  edges: [ContentCatalogEntityEdge!]!

  """Information about the current page being pulled with a query."""
  pageInfo: PageInfo!

  """
  Total count of content catalog entities matching the filtering in the API.
  """
  totalCount: Int!
}

"""Content catalog entity and cursor information."""
type ContentCatalogEntityEdge {
  """Content catalog entity cursor value for the edge."""
  cursor: Cursor!

  """A content catalog entity."""
  node: ContentCatalogEntity!
}

"""Content catalog entity selection filter."""
input ContentCatalogEntityFilter {
  """Filter by content catalog entity type."""
  entityType: ContentCatalogEntityTypeFilter

  """Filter by content catalog entity id."""
  id: IdFilter

  """Filter by content catalog entity name."""
  name: StringFilter

  """Filter by entity visibility."""
  private: BooleanFilter

  """Filter by content catalog entity title."""
  title: ContentCatalogEntityTitleFilter
}

"""Filter by content catalog entity title."""
input ContentCatalogEntityTitleFilter {
  """Filter by content catalog entity title id."""
  id: IdFilter
}

"""The type of a content catalog entity."""
enum ContentCatalogEntityType {
  """Content catalog item."""
  ITEM
}

"""Filter by content catalog entity type."""
input ContentCatalogEntityTypeFilter {
  """Filter by content catalog entity type."""
  in: [ContentCatalogEntityType!]!
}

"""A content catalog item."""
type ContentCatalogItem implements ContentCatalogEntity {
  """The content catalog version this entity appears in."""
  contentCatalogVersion: ContentCatalogVersion!

  """The cost of an item. When not set, defaults to 0."""
  cost: Float!

  """The content catalog entity version external IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The ID of the content catalog entity."""
  id: ID!

  """The URL to the content catalog entity's image."""
  imageUrl: Url!

  """The name of the content catalog entity."""
  name: String!

  """The visibility of this entity to other users."""
  private: Boolean
}

"""A content catalog version."""
type ContentCatalogVersion {
  """The content catalog version external IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The unique identifier of the content catalog version."""
  id: ID!

  """The unique name of the content catalog version. E.g. 7.34."""
  name: String!

  """The visibility of this version to other users."""
  private: Boolean

  """The date and time when the content catalog version becomes effective."""
  publishedOn: DateTime!

  """The title which the content catalog version belongs to."""
  title: Title!
}

"""
The result of querying list of content catalog versions, which provides additional information.
"""
type ContentCatalogVersionConnection {
  """All content catalog version edges for a query on a given page."""
  edges: [ContentCatalogVersionEdge!]!

  """Information about the current page being pulled with a query."""
  pageInfo: PageInfo!

  """
  Total count of content catalog versions matching the filtering in the API.
  """
  totalCount: Int!
}

"""Content catalog version and cursor information."""
type ContentCatalogVersionEdge {
  """Content catalog version cursor value for the edge."""
  cursor: Cursor!

  """A content catalog version."""
  node: ContentCatalogVersion!
}

"""Filter by a content catalog version."""
input ContentCatalogVersionFilter {
  """Filter by content catalog version name."""
  name: StringFilter

  """Filter by version visibility."""
  private: BooleanFilter

  """Filter by content catalog version published date."""
  publishedOn: DateTimeFilter

  """Filter by content catalog title."""
  title: ContentCatalogVersionTitleFilter
}

"""Ordering options for content catalog versions results."""
input ContentCatalogVersionOrder {
  """The ordering direction."""
  direction: OrderDirection!

  """The field to order the content catalog entities versions by."""
  field: ContentCatalogVersionOrderField!
}

"""The field which the result will be ordered by."""
enum ContentCatalogVersionOrderField {
  """Order by publishedOn."""
  PUBLISHED_ON

  """Order by title name."""
  TITLE
}

"""Filter by a content catalog version title."""
input ContentCatalogVersionTitleFilter {
  """Filter by title ID."""
  id: IdFilter
}

"""
The fields used to create a new content catalog item or a version of an existing item.
"""
input CreateContentCatalogItemInput {
  """The version of the content catalog the item should be linked to."""
  contentCatalogVersionId: ID!

  """The cost of the item. When not provided, it defaults to 0."""
  cost: Float

  """The external item IDs."""
  externalLinks: [ExternalLinkInput!]

  """
  The UUID of an existing item to create a new version of it.
  If not passed, a new item will be created.
  """
  id: ID

  """
  The image encoded as base64 string.
  If not provided, it defaults to a placeholder image.
  """
  imageData: String

  """
  The name of the item.
  Optional if creating a version of an existing item.
  """
  name: String

  """The visibility of this entity to other users."""
  private: Boolean
}

"""The response for the createContentCatalogItem mutation."""
type CreateContentCatalogItemPayload {
  """The created content catalog version information."""
  createdContentCatalogItem: ContentCatalogItem!
}

"""The fields used to create a content catalog version."""
input CreateContentCatalogVersionInput {
  """The external content catalog version ids."""
  externalLinks: [ExternalLinkInput!]! = []

  """The UNIQUE name of the content catalog version."""
  name: String!

  """The visibility of this entity to other users."""
  private: Boolean

  """The date and time when the catalog version becomes effective."""
  publishedOn: DateTime!

  """The ID of the title for the content catalog version."""
  titleId: ID!
}

"""The response for the createContentCatalogVersion mutation."""
type CreateContentCatalogVersionPayload {
  """The created content catalog version information."""
  createdContentCatalogVersion: ContentCatalogVersion!
}

"""The fields used to create a player."""
input CreatePlayerInput {
  """The external player IDs."""
  externalLinks: [ExternalLinkInput!]! = []

  """
  The nickname of the player. Must be unique and limited to 100 characters.
  """
  nickname: String!

  """The visibility of this entity to other users."""
  private: Boolean

  """The team the player belongs to."""
  team: CreatePlayerTeamInput!

  """The title the player participates in."""
  title: CreatePlayerTitleInput!
}

"""The response for the createPlayer mutation."""
type CreatePlayerPayload {
  """The created player information."""
  createdPlayer: Player!
}

"""The team field used to create a player."""
input CreatePlayerTeamInput {
  """The ID of the team for the player."""
  teamId: ID!
}

"""The title field used to create a player."""
input CreatePlayerTitleInput {
  """The ID of the title for the player."""
  titleId: ID!
}

"""The format fields used to create a series."""
input CreateSeriesFormatInput {
  """
  The series format identifier. Check available formats via SeriesFormat query.
  """
  id: ID!
}

"""The fields used to create a series."""
input CreateSeriesInput {
  """The external series IDs."""
  externalLinks: [ExternalLinkInput!]! = []

  """
  The series format i.a. best-of-3 (Bo3), score-after-2 (SA2). Referenced by ID.
  """
  format: CreateSeriesFormatInput!

  """The visibility of this entity to other users."""
  private: Boolean

  """
  The start time in UTC of this series, formatted as an ISO date string. For example: 2023-04-12T12:12:37-03:00.
  """
  startTimeScheduled: DateTime!

  """The teams playing in the series."""
  teams: [CreateSeriesTeamInput!]!

  """The title for the series."""
  title: CreateSeriesTitleInput!

  """The tournament for the series."""
  tournament: CreateSeriesTournamentInput!
}

"""The response for the createSeries mutation."""
type CreateSeriesPayload {
  """The created series information."""
  createdSeries: Series!
}

"""The team fields used to create a series."""
input CreateSeriesTeamInput {
  """The score advantage for the team in this series."""
  scoreAdvantage: Int! = 0

  """The ID of the team playing in the series."""
  teamId: ID!
}

"""The title fields used to create a series."""
input CreateSeriesTitleInput {
  """The ID of the title for the series."""
  titleId: ID!
}

"""The tournament fields used to create a series."""
input CreateSeriesTournamentInput {
  """The ID of the tournament for the series."""
  tournamentId: ID!
}

"""The fields used to create a team."""
input CreateTeamInput {
  """The team's primary color in hexadecimal. Defaults to grey."""
  colorPrimary: HexColor! = "#5b6f7e"

  """The team's secondary color in hexadecimal. Defaults to white."""
  colorSecondary: HexColor! = "#ffffff"

  """The external team IDs."""
  externalLinks: [ExternalLinkInput!]! = []

  """
  The logo of the team. Has to be a Base64 encoded image, supported types: image/jpg, image/jpeg, image/png, image/gif, image/svg+xml, image/webp.
  """
  logoData: String

  """The name of the team. Must be unique and limited to 100 characters."""
  name: String!

  """
  The shortened name of the team. It's limited to 20 characters and it's not unique.
  """
  nameShortened: String

  """The visibility of this entity to other users."""
  private: Boolean

  """The title the team participates in."""
  title: CreateTeamTitleInput!
}

"""The response for the createTeam mutation."""
type CreateTeamPayload {
  """The created team information."""
  createdTeam: Team!
}

"""The title fields used to create a team."""
input CreateTeamTitleInput {
  """The ID of the title for the team."""
  titleId: ID!
}

"""The fields used to create a tournament."""
input CreateTournamentInput {
  """The end date of the tournament formatted as ISO 8601 i.e. yyyy-MM-dd"""
  endDate: DateInput

  """The external tournament IDs."""
  externalLinks: [ExternalLinkInput!]! = []

  """
  The logo of the tournament. Has to be a Base64 encoded image, supported types: image/jpg, image/jpeg, image/png, image/gif, image/svg+xml, image/webp.
  """
  logoData: String

  """
  The name of the tournament. Must be unique and limited to 150 characters.
  """
  name: String!

  """
  The short name of the tournament. Must be unique and limited to 30 characters.
  """
  nameShortened: String!

  """The parent tournament of the tournament"""
  parent: CreateTournamentParentInput

  """The visibility of this entity to other users."""
  private: Boolean

  """The prize pool of the tournament in USD."""
  prizePool: MoneyInput

  """The start date of the tournament formatted as ISO 8601 i.e. yyyy-MM-dd"""
  startDate: DateInput

  """The participating teams of the tournament."""
  teams: [CreateTournamentTeamInput!]! = []

  """The titles being played in the tournament."""
  titles: [CreateTournamentTitleInput!]! = []
}

"""
The parent tournament fields used to create a tournament together with a parent.
"""
input CreateTournamentParentInput {
  """The ID of the parent tournament"""
  tournamentId: ID!
}

"""The response for the createTournament mutation."""
type CreateTournamentPayload {
  """The created tournament information."""
  createdTournament: Tournament!
}

"""The team fields used to update a tournament."""
input CreateTournamentTeamInput {
  """The ID of the team for the tournament."""
  teamId: ID!
}

"""The title fields used to create a tournament."""
input CreateTournamentTitleInput {
  """The ID of the title for the tournament."""
  titleId: ID!
}

"""Cursor value for pagination."""
scalar Cursor

"""A data provider which provides external entity IDs."""
type DataProvider {
  """Description of the data provider."""
  description: String

  """The name of the external data provider."""
  name: String!
}

"""Date formatted as ISO 8601."""
scalar Date

input DateInput {
  """ISO 8601 formatted date i.e. yyyy-MM-dd"""
  date: Date
}

"""DateTime formatted as ISO 8601."""
scalar DateTime

"""Filter by a datetime range."""
input DateTimeFilter {
  """
  DateTime for the beginning of the time range (optional), formatted as an ISO date string. Time window includes the given value.
  """
  gte: String

  """
  DateTime for the end of the time range (optional), formatted as an ISO date string. Time window includes the given value.
  """
  lte: String
}

"""Decimal number representation."""
scalar Decimal

"""The response for the deleteContentCatalogEntity mutation."""
type DeleteContentCatalogEntityPayload {
  """The version of the deleted content catalog entity."""
  contentCatalogVersionId: ID!

  """The ID of the deleted content catalog entity."""
  id: ID!
}

"""The response for the deleteContentCatalogVersion mutation."""
type DeleteContentCatalogVersionPayload {
  """The ID of the deleted content catalog version."""
  id: ID!
}

"""The ID of the player to delete."""
input DeletePlayerInput {
  """The player ID."""
  id: ID!
}

"""The ID of the removed player."""
type DeletePlayerPayload {
  """The player ID."""
  id: ID!
}

"""The ID of the series to delete."""
input DeleteSeriesInput {
  """The series ID."""
  id: ID!
}

"""The ID of the removed series."""
type DeleteSeriesPayload {
  """The series ID."""
  id: ID!
}

"""The ID of the team to delete."""
input DeleteTeamInput {
  """The team ID."""
  id: ID!
}

"""The ID of the removed team."""
type DeleteTeamPayload {
  """The team ID."""
  id: ID!
}

"""The ID of the tournament to delete."""
input DeleteTournamentInput {
  """The tournament ID."""
  id: ID!
}

"""The ID of the removed tournament."""
type DeleteTournamentPayload {
  """The tournament ID."""
  id: ID!
}

enum ErrorDetail {
  """
  The deadline expired before the operation could complete.
  
  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.
  
  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED

  """
  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.
  
  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM

  """
  The requested field is not found in the schema.
  
  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.
  
  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND

  """
  The client specified an invalid argument.
  
  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).
  
  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT

  """
  The provided cursor is not valid.
  
  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.
  
  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR

  """
  Unable to perform operation because a required resource is missing.
  
  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.
  
  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.
  
  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE

  """
  Service Error.
  
  There is a problem with an upstream service.
  
  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.
  
  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR

  """
  Request failed due to network errors.
  
  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE

  """
  Request throttled based on server concurrency limits.
  
  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY

  """
  Request throttled based on server CPU limits
  
  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU

  """
  The operation is not implemented or is not currently supported/enabled.
  
  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED

  """
  Unknown error.
  
  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.
  
  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN
}

enum ErrorType {
  """
  Bad Request.
  
  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.
  
  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST

  """
  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.
  
  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:
  
  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
       fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.
  
  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION

  """
  Internal error.
  
  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.
  
  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL

  """
  The requested entity was not found.
  
  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)
  
  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.
  
  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND

  """
  The caller does not have permission to execute the specified
  operation.
  
  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).
  
  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.
  
  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED

  """
  The request does not have valid authentication credentials.
  
  This is intended to be returned only for routes that require
  authentication.
  
  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED

  """
  Currently Unavailable.
  
  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.
  
  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE

  """
  Unknown error.
  
  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.
  
  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.
  
  When possible, a more specific error should be provided.
  
  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN
}

"""Information provided by the external data provider."""
type ExternalEntity {
  """The ID used by the external data provider."""
  id: ID!
}

"""The field for the external ID value."""
input ExternalEntityInput {
  """The external ID value. """
  id: ID!
}

"""Linking information for an external data provider."""
type ExternalLink {
  """The external data provider."""
  dataProvider: DataProvider!

  """The external information."""
  externalEntity: ExternalEntity!
}

"""The fields the external entity consist of."""
input ExternalLinkInput {
  """The data provider name. Strict control over possible values."""
  dataProviderName: String!

  """The external id value."""
  externalEntityInput: ExternalEntityInput!
}

"""Filter for series by game data points."""
input GameFilter {
  """Filter by game IDs."""
  id: IdFilter

  """Filter by game map."""
  map: MapFilter
}

"""Hexadecimal value of an RGB color."""
scalar HexColor

"""ID filter for entity identifiers."""
input IdFilter {
  """Array of IDs to look for."""
  in: [ID!]
}

"""Filter for map data points."""
input MapFilter {
  """Filter by map name."""
  name: StringFilter
}

"""A monetary value."""
type Money {
  """The amount in USD."""
  amount: Decimal!
}

input MoneyInput {
  """The amount of the prize pool."""
  amount: Decimal
}

type Mutation {
  """Creates a new version for a content catalog item."""
  createContentCatalogItem(createContentCatalogItemInput: CreateContentCatalogItemInput!): CreateContentCatalogItemPayload!

  """Creates a new content catalog version."""
  createContentCatalogVersion(createContentCatalogVersionInput: CreateContentCatalogVersionInput!): CreateContentCatalogVersionPayload!

  """Creates a new GRID player."""
  createPlayer(
    """
    Expects the nickname, the team the player belongs to and the title the player participates in and optionally the external links associated with the player.
    """
    createPlayerInput: CreatePlayerInput!
  ): CreatePlayerPayload!

  """Creates a new GRID Series."""
  createSeries(
    """
    Expects the title for the series, the tournament where it's being played, the teams playing it, the start date and time, and the format.
    """
    createSeriesInput: CreateSeriesInput!
  ): CreateSeriesPayload!

  """Creates a new GRID team."""
  createTeam(
    """
    Expects the name, the title the team participates in and optionally the primary and/or secondary colors, the logo of the team and the external links associated with the team.
    """
    createTeamInput: CreateTeamInput!
  ): CreateTeamPayload!

  """Creates a new GRID tournament."""
  createTournament(
    """
    Expects the name and short name, and optionally the titles for the tournament, the teams playing in it, and the logo of the tournament.
    """
    createTournamentInput: CreateTournamentInput!
  ): CreateTournamentPayload!

  """Deletes a specific version of a content catalog entity."""
  deleteContentCatalogEntity(
    """The version of the content catalog entity to be deleted."""
    contentCatalogVersionId: ID!

    """The ID of the entity to be deleted."""
    id: ID!
  ): DeleteContentCatalogEntityPayload!

  """Deletes a specific content catalog version."""
  deleteContentCatalogVersion(
    """The ID of the content catalog version to delete."""
    id: ID!
  ): DeleteContentCatalogVersionPayload!

  """Deletes an existing GRID player."""
  deletePlayer(
    """Expects the ID of an existing player."""
    deletePlayerInput: DeletePlayerInput!
  ): DeletePlayerPayload!

  """Deletes an existing GRID Series."""
  deleteSeries(
    """Expects the ID of an existing Series."""
    deleteSeriesInput: DeleteSeriesInput!
  ): DeleteSeriesPayload!

  """Deletes an existing GRID team."""
  deleteTeam(
    """Expects the ID of an existing team."""
    deleteTeamInput: DeleteTeamInput!
  ): DeleteTeamPayload!

  """Deletes an existing GRID tournament."""
  deleteTournament(
    """Expects the ID of an existing tournament."""
    deleteTournamentInput: DeleteTournamentInput!
  ): DeleteTournamentPayload!

  """Updates a specific version of a content catalog item."""
  updateContentCatalogItem(updateContentCatalogItemInput: UpdateContentCatalogItemInput!): UpdateContentCatalogItemPayload!

  """Updates a specific content catalog version"""
  updateContentCatalogVersion(updateContentCatalogVersionInput: UpdateContentCatalogVersionInput!): UpdateContentCatalogVersionPayload!

  """Updates an existing GRID player."""
  updatePlayer(
    """
    Expects the ID of the player, and optionally the nickname, the team the player belongs to, the title the player participates in and the external links associated with the player.
    """
    updatePlayerInput: UpdatePlayerInput!
  ): UpdatePlayerPayload!

  """Updates an existing GRID Series."""
  updateSeries(
    """
    Expects the ID, and optionally can receive: the title, the tournament, the teams, the start date and time, and/or the format.
    """
    updateSeriesInput: UpdateSeriesInput!
  ): UpdateSeriesPayload!

  """Updates an existing GRID team."""
  updateTeam(
    """
    Expects the ID of the team and optionally the name, the title the team participates in, the primary and the primary and/or secondary colors, the logo of the team and the external links associated with the team.
    """
    updateTeamInput: UpdateTeamInput!
  ): UpdateTeamPayload!

  """Updates an existing GRID tournament."""
  updateTournament(
    """
    Expects the ID of the tournament, and optionally the name, the short name, the titles for the tournament, the teams playing in it, and/or the logo of the tournament.
    """
    updateTournamentInput: UpdateTournamentInput!
  ): UpdateTournamentPayload!
}

"""
Filter by a date range. If both 'gte' and 'lte' are null, it'll fetch the entities for which the field the filter is applied to is null.
"""
input NullableDateFilter {
  """
  Date for the beginning of the time range (optional), formatted as an ISO date string. Time window includes the given value.
  """
  gte: Date

  """
  Date for the end of the time range (optional), formatted as an ISO date string. Time window includes the given value.
  """
  lte: Date
}

"""ID filter with nullable value."""
input NullableIdFilter {
  """ID to look for, can be nullable."""
  id: ID
}

"""Order in which the results will be provided."""
enum OrderDirection {
  """Orders the results ascending."""
  ASC

  """Orders the results descending."""
  DESC
}

"""An organization."""
type Organization implements OrganizationInterface {
  """The ID of the organization."""
  id: ID!

  """The name of the organization."""
  name: String!

  """The visibility status of the organization."""
  private: Boolean!

  """The teams that belong to the organization."""
  teams: [TeamRelation!]
}

"""
The result of querying a list of organizations. It provides pagination information.
"""
type OrganizationConnection {
  """All players edges for query on a given page."""
  edges: [OrganizationEdge!]!

  """Information about current page being pulled with query."""
  pageInfo: PageInfo!

  """Total count of players in the API."""
  totalCount: Int!
}

"""Organization and cursor information."""
type OrganizationEdge {
  """Organizations cursor value for the edge."""
  cursor: Cursor!

  """Organizations."""
  node: Organization!
}

"""Filter for organization by data points."""
input OrganizationFilter {
  """Limits results by string filter of organization's name."""
  name: StringFilter

  """Filter by organization visibility."""
  private: BooleanFilter
}

"""An interface for organization types."""
interface OrganizationInterface {
  """The ID of the organization."""
  id: ID!

  """The name of the organization."""
  name: String!
}

"""
An organization relation. Removes connection to Teams from the Organization.
"""
type OrganizationRelation implements OrganizationInterface {
  """The ID of the organization."""
  id: ID!

  """The name of the organization."""
  name: String!
}

"""Information about current paginated data set position."""
type PageInfo {
  """The cursor of the last edge of the page."""
  endCursor: Cursor

  """If there is a page after the one being returned."""
  hasNextPage: Boolean!

  """If there is a page before the one being returned."""
  hasPreviousPage: Boolean!

  """The cursor of the first edge of the page."""
  startCursor: Cursor
}

"""A player."""
type Player {
  """The external player IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The ID of a player"""
  id: ID!

  """The name of the player."""
  nickname: String!

  """The visibility status of the player."""
  private: Boolean!

  """The team the player is currently playing."""
  team: Team

  """The title the player is currently playing."""
  title: Title!
}

"""
The result of querying a list of players. It provides pagination information.
"""
type PlayerConnection {
  """All players edges for query on a given page."""
  edges: [PlayerEdge!]!

  """Information about current page being pulled with query."""
  pageInfo: PageInfo!

  """Total count of players in the API."""
  totalCount: Int!
}

"""Player and cursor information."""
type PlayerEdge {
  """Players cursor value for the edge."""
  cursor: Cursor!

  """Players."""
  node: Player!
}

"""Filter for player data points."""
input PlayerFilter {
  """Filter by the player's nickname."""
  nickname: StringFilter

  """Filter by player visibility."""
  private: BooleanFilter

  """
  Filter by a specific team ID. If this is null, no filter will be applied. If `teamId.id` is null, then players without team will be fetched.
  """
  teamIdFilter: NullableIdFilter

  """Filter by a specific title ID."""
  titleId: ID
}

"""The availability of a product for a given series."""
type ProductServiceLevel {
  """The name of the product."""
  productName: String!

  """The availability level for the product."""
  serviceLevel: ServiceLevel!
}

"""Filters for series by product and/or by service level."""
input ProductServiceLevelFilter {
  """The name of the product to filter by."""
  productName: String!

  """The availability level to filter by."""
  serviceLevel: ServiceLevel!
}

type Query {
  """Get multiple series by query specifications."""
  allSeries(
    """Cursor, after which results to query."""
    after: Cursor

    """Cursor, before which results to query."""
    before: Cursor

    """Filters for series results."""
    filter: SeriesFilter

    """Amount of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Amount of nodes to return starting from the end."""
    last: Int

    """Ordering of resulting series set."""
    orderBy: SeriesOrderBy! = ID

    """Whether to order by ascending or descending direction."""
    orderDirection: OrderDirection! = ASC
  ): SeriesConnection!

  """Get multiple content catalog entities by query specification."""
  contentCatalogEntities(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    The content catalog version Id to search entities by.
    If not specified, the latest version is selected.
    """
    contentCatalogVersionId: ID

    """Filter specifications."""
    filter: ContentCatalogEntityFilter

    """Number of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Number of nodes to return starting from the end."""
    last: Int
  ): ContentCatalogEntityConnection!

  """Get a Content Catalog Entity by ID."""
  contentCatalogEntity(
    """
    The content catalog version of the item.
    If not specified, the query returns the item definition of the latest version.
    """
    contentCatalogVersionId: ID

    """The ID of a Content Catalog Entity."""
    id: ID!
  ): ContentCatalogEntity

  """Get the GRID Content Catalog Entity ID by an external ID."""
  contentCatalogEntityIdByExternalId(
    """
    The content catalog version of the item.
    If not specified, the query returns the id of the latest item definition.
    """
    contentCatalogVersionId: ID

    """
    The name of the data provider to search by. An example could be 'STEAM'.
    """
    dataProviderName: String!

    """The external ID to search by."""
    externalEntityId: ID!
  ): ID

  """Get a Content Catalog Version by ID."""
  contentCatalogVersion(
    """The ID of a Content Catalog Version."""
    id: ID!
  ): ContentCatalogVersion

  """Get the GRID Content Catalog Version ID by an external ID."""
  contentCatalogVersionIdByExternalId(
    """
    The name of the data provider to search by. An example could be "STEAM".
    """
    dataProviderName: String!

    """The external ID to search by."""
    externalEntityId: ID!
  ): ID

  """Get multiple content catalog versions by query specification."""
  contentCatalogVersions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Filter specifications."""
    filter: ContentCatalogVersionFilter

    """Number of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Number of nodes to return starting from the end."""
    last: Int

    """Ordering options."""
    orderBy: [ContentCatalogVersionOrder!]
  ): ContentCatalogVersionConnection!

  """Get supported data providers."""
  dataProviders: [DataProvider!]!

  """Get the GRID Game ID by an external ID."""
  gameIdByExternalId(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalGameId: ID!
  ): ID

  """Get an organization by ID."""
  organization(
    """The ID of the organization to retrieve."""
    id: ID!
  ): Organization

  """Get multiple organizations by query specifications."""
  organizations(
    """Cursor, after which results to query."""
    after: Cursor

    """Cursor, before which results to query."""
    before: Cursor

    """Filters for organization results."""
    filter: OrganizationFilter

    """Amount of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Amount of nodes to return starting from the end."""
    last: Int
  ): OrganizationConnection

  """Get a player by ID."""
  player(
    """The ID of the player to retrieve."""
    id: ID!
  ): Player

  """Get the GRID Player ID by an external ID."""
  playerIdByExternalId(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalPlayerId: ID!

    """The title player belongs to."""
    titleId: ID
  ): ID

  """Get multiple players by query specifications."""
  players(
    """Cursor, after which results to query."""
    after: Cursor

    """Cursor, before which results to query."""
    before: Cursor

    """Filters for player results."""
    filter: PlayerFilter

    """Amount of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Amount of nodes to return starting from the end."""
    last: Int
  ): PlayerConnection

  """Get a series by ID."""
  series(
    """The ID of the series to retrieve."""
    id: ID!
  ): Series

  """
  @deprecated(reason: 'Use seriesIdByExternalId instead') Get a series by its external ID.
  """
  seriesByExternalSeries(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalSeriesId: String!
  ): Series @deprecated(reason: "Use seriesIdByExternalId instead")

  """Get supported series formats."""
  seriesFormats: [SeriesFormat!]!

  """Get the GRID Series ID by an external ID."""
  seriesIdByExternalId(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalSeriesId: ID!
  ): ID

  """Get a team by ID."""
  team(
    """The ID of the team to retrieve."""
    id: ID!
  ): Team

  """Get the GRID Team ID by an external ID."""
  teamIdByExternalId(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalTeamId: ID!

    """The title in which the team participates."""
    titleId: ID!
  ): ID

  """Get multiple teams by query specifications."""
  teams(
    """Cursor, after which results to query."""
    after: Cursor

    """Cursor, before which results to query."""
    before: Cursor

    """Filters for team results."""
    filter: TeamFilter

    """Amount of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Amount of nodes to return starting from the end."""
    last: Int
  ): TeamConnection!

  """Get a title by ID."""
  title(
    """The ID of the title to retrieve."""
    id: ID!
  ): Title

  """Get all titles."""
  titles(
    """Filters for titles results."""
    filter: TitleFilter
  ): [Title!]!

  """Get a tournament by ID."""
  tournament(
    """The ID of the tournament to retrieve."""
    id: ID!
  ): Tournament

  """Get the GRID Tournament ID by an external ID."""
  tournamentIdByExternalId(
    """
    The name of the data provider to look by. An example could be "STEAM"
    """
    dataProviderName: String!

    """The external ID to look for."""
    externalTournamentId: ID!
  ): ID

  """Get multiple tournaments by query specifications."""
  tournaments(
    """Cursor, after which results to query."""
    after: Cursor

    """Cursor, before which results to query."""
    before: Cursor

    """Filters for tournament results."""
    filter: TournamentFilter

    """Amount of nodes to return starting from the beginning. Defaults to 10."""
    first: Int

    """Amount of nodes to return starting from the end."""
    last: Int
  ): TournamentConnection!
}

"""A series."""
type Series {
  """The external series IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The format of the series."""
  format: SeriesFormat!

  """The ID of a series."""
  id: ID!

  """The visibility status of the series."""
  private: Boolean!

  """The service level for the series."""
  productServiceLevels: [ProductServiceLevel!]!

  """The scheduled start time of the series."""
  startTimeScheduled: DateTime!

  """The list of stream URLs available for the series."""
  streams: [VideoStream!]!

  """The teams participating in the series."""
  teams: [TeamParticipant!]!

  """The title being played in the series."""
  title: Title!

  """The tournament in which the series is being played."""
  tournament: Tournament!

  """The type of the series."""
  type: SeriesType!
}

"""
The result of querying a list of series. It provides pagination information.
"""
type SeriesConnection {
  """All series edges for query on a given page."""
  edges: [SeriesEdge!]!

  """Information about current page being pulled with query."""
  pageInfo: PageInfo!

  """Total count of series in the API."""
  totalCount: Int!
}

"""Series and cursor information."""
type SeriesEdge {
  """Series cursor value for the edge."""
  cursor: Cursor!

  """Series."""
  node: Series!
}

"""Filter for series data points."""
input SeriesFilter {
  """Filter by live data points."""
  live: SeriesLiveFilter

  """Filter by participating player IDs."""
  livePlayerIds: IdFilter

  """Filter by series visibility."""
  private: BooleanFilter

  """Filter by product service levels."""
  productServiceLevels: ProductServiceLevelFilter

  """Filter by a time range."""
  startTimeScheduled: DateTimeFilter

  """@deprecated('Use teamIds filter instead.') Filter by team ID."""
  teamId: ID

  """Filter by team IDs."""
  teamIds: IdFilter

  """@deprecated('Use titleIds filter instead.') Filter by title ID."""
  titleId: ID

  """Filter by title IDs."""
  titleIds: IdFilter

  """Filter by tournament data points."""
  tournament: SeriesTournamentFilter

  """
  @deprecated('Use the tournament filter instead.') Filter by tournament ID.
  """
  tournamentId: ID

  """
  @deprecated('Use the tournament filter instead.') Filter by tournament IDs.
  """
  tournamentIds: IdFilter

  """@deprecated('Use types filter instead.') Filter by series type."""
  type: SeriesType

  """Filter by series types."""
  types: [SeriesType!]
}

"""The format of the series, such as: BO1, BO3, SA2."""
type SeriesFormat {
  """The ID of the format."""
  id: ID

  """The name of a format."""
  name: String!

  """The shortened name of a format (max. 5 characters)."""
  nameShortened: String!
}

"""Filter for series by live data points."""
input SeriesLiveFilter {
  """Filter by game."""
  games: GameFilter
}

"""Field to order results by."""
enum SeriesOrderBy {
  """Orders the series result by ID."""
  ID

  """Orders the series result by the scheduled start time."""
  StartTimeScheduled
}

"""Filter for series by tournament data points."""
input SeriesTournamentFilter {
  """Filter by tournament end date."""
  endDate: NullableDateFilter

  """Filter by tournament IDs."""
  id: IdFilter

  """Include children tournaments in the filter."""
  includeChildren: BooleanFilter

  """Filter by tournament name."""
  name: StringFilter

  """Filter by tournament shortened name."""
  nameShortened: StringFilter

  """Filter by tournament start date."""
  startDate: NullableDateFilter

  """Filter by tournament titles data points."""
  title: SeriesTournamentTitleFilter
}

"""Filter for series by the tournament title data points."""
input SeriesTournamentTitleFilter {
  """Array of IDs to look for."""
  id: IdFilter
}

"""The type of series being returned."""
enum SeriesType {
  """A competitive non-esports series."""
  COMPETITIVE

  """A competitive series."""
  ESPORTS

  """A GRID test game that gets played repeatedly in a loop."""
  LOOPFEED

  """A practice series."""
  SCRIM
}

"""The availability level for a given product."""
enum ServiceLevel {
  """The product service is fully available."""
  FULL

  """
  Some functionalities of the product service may be limited or unavailable.
  """
  LIMITED

  """The product service is not available."""
  NONE
}

"""String filter for character-based fields."""
input StringFilter {
  """Case-insensitive string filter to match field containing it."""
  contains: String

  """Case-insensitive string filter to match field exactly it."""
  equals: String
}

"""A team."""
type Team implements TeamInterface {
  """The primary color of the team."""
  colorPrimary: HexColor!

  """The secondary color of the team."""
  colorSecondary: HexColor!

  """The external team IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The ID of a team."""
  id: ID!

  """The team logo URL."""
  logoUrl: Url!

  """The name of the team."""
  name: String!

  """The shortened name of a team."""
  nameShortened: String

  """The organization the team plays for."""
  organization: OrganizationRelation

  """The visibility status of the team."""
  private: Boolean!

  """
  Title the team is related to. 'titles' field will be removed soon and every team will have a single title.
  """
  title: Title!

  """
  @deprecated('Use title field instead.') The titles the team is related to.
  """
  titles: [Title!]!
}

"""
The result of querying a list of teams. It provides pagination information.
"""
type TeamConnection {
  """All team edges for query on a given page."""
  edges: [TeamEdge!]!

  """Information about current page being pulled with query."""
  pageInfo: PageInfo!

  """Total count of teams in the API."""
  totalCount: Int!
}

"""Team and cursor information."""
type TeamEdge {
  """Team cursor value cursor value for the edge."""
  cursor: Cursor!

  """Team."""
  node: Team!
}

"""Filter for team data points."""
input TeamFilter {
  """Filter by the team's name."""
  name: StringFilter

  """Filter by the team's shortened name."""
  nameShortened: StringFilter

  """Filter by a specific organization."""
  organizationId: ID

  """Filter by team visibility."""
  private: BooleanFilter

  """Filter by a specific title."""
  titleId: ID
}

"""An interface for team types."""
interface TeamInterface {
  """The primary color of the team."""
  colorPrimary: HexColor!

  """The secondary color of the team."""
  colorSecondary: HexColor!

  """The ID of the team."""
  id: ID!

  """The team logo URL."""
  logoUrl: Url!

  """The name of the team."""
  name: String!

  """The shortened name of a team."""
  nameShortened: String

  """The titles the team is related to."""
  titles: [Title!]!
}

"""Team participating in the series."""
type TeamParticipant {
  """The team base information."""
  baseInfo: Team!

  """The team score advantage for the team in the series."""
  scoreAdvantage: Int!
}

"""A team relation. Removes connection to Organization from the Team."""
type TeamRelation implements TeamInterface {
  """The primary color of the team."""
  colorPrimary: HexColor!

  """The secondary color of the team."""
  colorSecondary: HexColor!

  """The ID of the team."""
  id: ID!

  """The team logo URL."""
  logoUrl: Url!

  """The name of the team."""
  name: String!

  """The shortened name of a team."""
  nameShortened: String

  """The titles the team is related to."""
  titles: [Title!]!
}

"""A title."""
type Title {
  """The ID of the title."""
  id: ID!

  """The name of the title."""
  name: String!

  """The shortened name of the title (max. 20 characters)."""
  nameShortened: String!

  """The visibility status of the title."""
  private: Boolean
}

"""Filter for titles."""
input TitleFilter {
  """Filter by title visibility."""
  private: BooleanFilter
}

"""A tournament."""
type Tournament {
  """The children tournament of the tournament."""
  children: [Tournament!]!

  """The end date of the tournament."""
  endDate: Date

  """The external tournament IDs and providers."""
  externalLinks: [ExternalLink!]!

  """The ID of a tournament."""
  id: ID!

  """The tournament logo URL."""
  logoUrl: Url!

  """The name of the tournament."""
  name: String!

  """The shortened name of the tournament (max. 30 characters)."""
  nameShortened: String!

  """The parent tournament of the tournament."""
  parent: Tournament

  """The visibility status of the tournament."""
  private: Boolean!

  """The tournament prize pool in USD."""
  prizePool: Money

  """The start date of the tournament."""
  startDate: Date

  """The teams linked to the tournament."""
  teams: [Team!]!

  """The titles linked to the tournament."""
  titles: [Title!]!
}

"""
The result of querying a list of tournaments. It provides pagination information.
"""
type TournamentConnection {
  """All tournament edges for query on a given page."""
  edges: [TournamentEdge!]!

  """Information about current page being pulled with query."""
  pageInfo: PageInfo!

  """Total count of tournaments in the API."""
  totalCount: Int!
}

"""Tournament and cursor information."""
type TournamentEdge {
  """Tournament cursor value for the edge."""
  cursor: Cursor!

  """Tournament."""
  node: Tournament!
}

"""Filter for tournament data points."""
input TournamentFilter {
  """Filter by tournament end date."""
  endDate: NullableDateFilter

  """
  Filter tournaments that have children. If false, only tournaments at the bottom-most level of the hierarchy are returned.
  """
  hasChildren: BooleanFilter

  """
  Filter tournaments that have parents. If false, only tournaments at the top-most level of the hierarchy are returned.
  """
  hasParent: BooleanFilter

  """Filter by tournament name."""
  name: StringFilter

  """Filter by tournament short name."""
  nameShortened: StringFilter

  """Filter by tournaments visibility."""
  private: BooleanFilter

  """Filter by tournament start date."""
  startDate: NullableDateFilter

  """Filter by tournament titles."""
  title: TournamentTitleFilter

  """
  @deprecated('Use the titles filter instead.') Limits results to specific title.
  """
  titleId: ID
}

"""Filter for tournaments by title data points."""
input TournamentTitleFilter {
  """Filter by tournament IDs."""
  id: IdFilter
}

"""
The fields used to create a new content catalog item or a version of an existing item.
"""
input UpdateContentCatalogItemInput {
  """The content catalog version."""
  contentCatalogVersionId: ID!

  """The new cost of the item."""
  cost: Float

  """The external item IDs. Overrides all previous values."""
  externalLinks: [ExternalLinkInput!]

  """The UUID of an existing item."""
  id: ID!

  """The new base64 encoded image of the item."""
  imageData: String

  """The new name of the item."""
  name: String

  """The visibility of this entity to other users."""
  private: Boolean
}

"""The response for the updateContentCatalogItem mutation."""
type UpdateContentCatalogItemPayload {
  """The updated content catalog version information."""
  updatedContentCatalogItem: ContentCatalogItem!
}

"""The fields used to update a content catalog version."""
input UpdateContentCatalogVersionInput {
  """The unique identifier of the content catalog version."""
  contentCatalogVersionId: ID!

  """The visibility of this entity to other users."""
  private: Boolean
}

"""The fields used to update item's owners"""
input UpdateContentCatalogVersionOwnerInput {
  """The owner's ID."""
  ownerId: ID!
}

"""The response for the updateContentCatalogVersion mutation."""
type UpdateContentCatalogVersionPayload {
  """The updated content catalog version information."""
  updatedContentCatalogVersion: ContentCatalogVersion!
}

"""The fields used to update a player."""
input UpdatePlayerInput {
  """The external player IDs. Overrides all previous values."""
  externalLinks: [ExternalLinkInput!]

  """The ID of the player."""
  id: ID!

  """
  The nickname of the player. Must be unique and limited to 100 characters.
  """
  nickname: String

  """The visibility of this entity to other users."""
  private: Boolean

  """The team the player belongs to. Overrides previous value."""
  team: UpdatePlayerTeamInput

  """The title the player participates in. Overrides previous value."""
  title: UpdatePlayerTitleInput
}

"""The response for the updatePlayer mutation."""
type UpdatePlayerPayload {
  """The updated player information."""
  updatedPlayer: Player!
}

"""The team field used to update a player."""
input UpdatePlayerTeamInput {
  """The ID of the team for the player."""
  teamId: ID
}

"""The title field used to update a player."""
input UpdatePlayerTitleInput {
  """The ID of the title for the player."""
  titleId: ID!
}

"""The format fields used to update a series."""
input UpdateSeriesFormatInput {
  """
  The series format identifier. Check available formats via SeriesFormat query.
  """
  id: ID!
}

"""The fields used to update a series."""
input UpdateSeriesInput {
  """The external series IDs. Overrides all previous values."""
  externalLinks: [ExternalLinkInput!]

  """
  The new series format i.a. best-of-3 (Bo3), score-after-2 (SA2). Referenced by ID.
  """
  format: UpdateSeriesFormatInput

  """The ID of the series."""
  id: ID!

  """The visibility of this entity to other users."""
  private: Boolean

  """
  The new start time in UTC of this series, formatted as an ISO date string. For example: 2023-04-12T12:12:37-03:00.
  """
  startTimeScheduled: DateTime

  """The new teams for the series. Overrides the previous value."""
  teams: [UpdateSeriesTeamInput!]

  """The new title for the series."""
  title: UpdateSeriesTitleInput

  """The new tournament for the series."""
  tournament: UpdateSeriesTournamentInput
}

"""The response for the updateSeries mutation."""
type UpdateSeriesPayload {
  """The updated series information."""
  updatedSeries: Series!
}

"""The team fields used to update a series."""
input UpdateSeriesTeamInput {
  """The score advantage for the team in this series."""
  scoreAdvantage: Int! = 0

  """The ID of the team playing in the series."""
  teamId: ID!
}

"""The title fields used to update a series."""
input UpdateSeriesTitleInput {
  """The ID of the title for the series."""
  titleId: ID!
}

"""The tournament fields used to update a series."""
input UpdateSeriesTournamentInput {
  """The ID of the tournament for the series."""
  tournamentId: ID!
}

"""The fields used to update a team."""
input UpdateTeamInput {
  """The new team's primary color in hexadecimal. Defaults to grey."""
  colorPrimary: HexColor

  """The new team's secondary color in hexadecimal. Defaults to white."""
  colorSecondary: HexColor

  """The external team IDs. Overrides all previous values."""
  externalLinks: [ExternalLinkInput!]

  """The ID of the team."""
  id: ID!

  """
  The new logo of the team. Has to be a Base64 encoded image, supported types: image/jpg, image/jpeg, image/png, image/gif, image/svg+xml, image/webp.
  """
  logoData: String

  """
  The new name of the team. Must be unique and limited to 100 characters.
  """
  name: String

  """
  The new shortened name of the team. It's limited to 20 characters and it's not unique.
  """
  nameShortened: String

  """The visibility of this entity to other users."""
  private: Boolean

  """The title the team participates in. Overrides previous value."""
  title: UpdateTeamTitleInput
}

"""The response for the updateTeam mutation."""
type UpdateTeamPayload {
  """The updated team information."""
  updatedTeam: Team!
}

"""The title fields used to update a team."""
input UpdateTeamTitleInput {
  """The ID of the title for the team."""
  titleId: ID!
}

"""The fields used to update a tournament."""
input UpdateTournamentInput {
  """The end date of the tournament formatted as ISO 8601 i.e. yyyy-MM-dd"""
  endDate: DateInput

  """The external tournament IDs. Overrides all previous values."""
  externalLinks: [ExternalLinkInput!]

  """The ID of the tournament."""
  id: ID!

  """
  The new logo of the tournament. Has to be a Base64 encoded image, supported types: image/jpg, image/jpeg, image/png, image/gif, image/svg+xml, image/webp.
  """
  logoData: String

  """
  The new name of the tournament. Must be unique and limited to 150 characters.
  """
  name: String

  """
  The new short name of the tournament. Must be unique and limited to 30 characters.
  """
  nameShortened: String

  """The parent tournament of the tournament"""
  parent: UpdateTournamentParentInput

  """The visibility of this entity to other users."""
  private: Boolean

  """The prize pool of the tournament in USD."""
  prizePool: MoneyInput

  """The start date of the tournament formatted as ISO 8601 i.e. yyyy-MM-dd"""
  startDate: DateInput

  """
  The new teams that will be playing in the tournament. Overrides previous value.
  """
  teams: [UpdateTournamentTeamInput!]

  """
  The new titles being played in the tournament. Overrides previous value.
  """
  titles: [UpdateTournamentTitleInput!]
}

"""
The parent tournament fields used to create a tournament together with a parent.
"""
input UpdateTournamentParentInput {
  tournamentId: ID
}

"""The response for the updateTournament mutation."""
type UpdateTournamentPayload {
  """The updated tournament information."""
  updatedTournament: Tournament!
}

"""The team fields used to update a tournament."""
input UpdateTournamentTeamInput {
  """The ID of the team for the tournament."""
  teamId: ID!
}

"""The title fields used to update a tournament."""
input UpdateTournamentTitleInput {
  """The ID of the title for the tournament."""
  titleId: ID!
}

"""URL pointing to resource."""
scalar Url

"""Live video stream details."""
type VideoStream {
  """URL link to live video stream."""
  url: String!
}